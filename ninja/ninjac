#!/bin/bash

# TODO
# 1) get rid of cmd line parsing, just pass them onto ninja itself.  might need to pull out a target first, though. [FIXED]
# 2) ninjac should return the return code from ninja, so that "ninjac -j 15 && ctest" works as expected [FIXED]
# 3) make bash autocomplete work -- this is tricky because you need to be in the same directory as build.ninja
# 4) support parallel make [FIXED]

ninjaArgs=""

IGNORE_UNUSED=0
i=0
while test $# -gt 0
do
    case "$1" in
        clean) echo "I'm sorry, Dave, I can't do that. I'm not a real ninja." #avoid accidentally cleaning out entire build tree
            exit 1
            ;;
        ignoreunused) echo "found it"
            IGNORE_UNUSED=1
            ;;
        *) ninjaArgs="$ninjaArgs $1"
           i=$i+1
            ;;
    esac
    shift
done

if [[ "$IGNORE_UNUSED" == "0" ]]; then
  if test -e "__CMAKE_UNUSED_VARIABLES"; then
    echo "cmake detected unused variables"
    echo "If this is ok, rerun ninjac with \"-ignoreunused\""
    exit 1
  fi
fi

# Main section
origdir=`pwd`

# Interpret signals correctly
trap "cd $origdir" SIGINT SIGTERM

# Try to find the ninja file somewhere in
# the file hierarchy
ninjaf='build.ninja'
ninjadir=""
if   test -e                          "$ninjaf"; then s=0; ninjadir="./"
elif test -e                       "../$ninjaf"; then s=1; ninjadir="../"
elif test -e                    "../../$ninjaf"; then s=2; ninjadir="../../"
elif test -e                 "../../../$ninjaf"; then s=3; ninjadir="../../../"
elif test -e              "../../../../$ninjaf"; then s=4; ninjadir="../../../../"
elif test -e           "../../../../../$ninjaf"; then s=5; ninjadir="../../../../../"
elif test -e        "../../../../../../$ninjaf"; then s=6; ninjadir="../../../../../../"
elif test -e     "../../../../../../../$ninjaf"; then s=7; ninjadir="../../../../../../../"
elif test -e  "../../../../../../../../$ninjaf"; then s=8; ninjadir="../../../../../../../../"
else
  #echo "Ninja build not found, trying to use make..."
  make $ninjaArgs
  exit $?
fi

# Calculate the relative path of current directory
# in respect to ninja build root
curdir="."
if [ "$s" -ne "0" ]; then
  curdir=`echo $origdir | rev | cut -f -$s -d / | rev`
fi

cd $ninjadir
if [ "$s" -eq "0" ]; then
  # top level of build tree, where ninjas live
  ninja $ninjaArgs
  rc=$?
else
  # Build all targets in current directory
  targets=""
  which parallel &> /dev/null
  if [[ "$?" == "0" ]]; then
    ninja $ninjaArgs `LANG="C" grep "^build $curdir" $ninjaf | parallel --no-notice --pipe "cut -f 1 -d: | sed 's/^build //'"`
  else
    ninja $ninjaArgs `LANG="C" grep "^build $curdir" $ninjaf | cut -f 1 -d: | sed 's/^build //'`
  fi
  rc=${PIPESTATUS[0]}
fi
cd $origdir
#the return code of ninja will be the return code of the script
echo 
echo -en "\007"
exit $rc
